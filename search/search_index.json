{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#nelsie","title":"Nelsie","text":"<p>Nelsie allows you to create slides programmatically using Python. It is a library with a Python API and a renderer written in Rust. The output is a PDF file or a set of SVG/PNG files.</p> <p>There is no DSL or GUI; presentations created with Nelsie are fully programmed in Python. We believe that creating presentations in a programmable way makes the process of creating slides smoother and more reliable.</p> <p>Nelsie focuses on controlling what the audience sees, so you can continuously reveal fragments of the slide, or simply manage which parts are highlighted.</p>"},{"location":"#history","title":"History","text":"<p>Nelsie is a complete rewrite of the previous project Elsie. Nelsie solves the biggest problems of Elsie: Dependency on Inkscape as a rendering engine (This makes Elsie difficult to install on some systems; performance issues and problems when Inkscape changes its programming API). This is solved by a own rendering engine (based on resvg) included in the Nelsie package. Nelsie also offers many API improvements, namely the introduction of InSteps and the Flexbox layout engine.</p>"},{"location":"api/","title":"API docs","text":"<ul> <li>Generated API documentation</li> </ul>"},{"location":"examples/","title":"Examples","text":"<ul> <li>Minimal example [source code ]</li> <li>Demonstration of features [PDF, source code]</li> </ul>"},{"location":"getting_started/","title":"Getting started","text":"<ul> <li>Install Nelsie package: <pre><code>$ pip install nelsie\n</code></pre></li> <li>Create the file <code>slides.py</code> with the following content:</li> </ul> <pre><code>from nelsie import SlideDeck\n\n# Create a slide deck\ndeck = SlideDeck()\n\n# Insert a slide\n@deck.slide()\ndef hello_world(slide):\n    slide.text(\"Hello world!\")\n\n# Render into PDF\ndeck.render(\"slides.pdf\")\n</code></pre> <ul> <li>Run <code>python slides.py</code>. It creates file <code>slides.pdf</code>.</li> </ul>"},{"location":"install/","title":"Installation","text":"<pre><code>$ pip install nelsie\n</code></pre> <p>Nelsie supports Linux, Windows, and MacOS X on all major platforms.</p>"},{"location":"install/#installation-from-sources","title":"Installation from sources","text":"<ul> <li>Install Rust (https://rustup.rs/)</li> <li>Install Maturin (<code>pip install maturin</code>)</li> <li>Run in Nelsie source code directory:   <pre><code>$ python3 -m venv venv\n$ source venv/bin/activate\n$ maturin build --release\n</code></pre></li> </ul>"},{"location":"guide/basics/","title":"Basics","text":""},{"location":"guide/basics/#slide-deck","title":"Slide deck","text":"<p>A presentation (a set of slides) is represented in Nelsie as an instance of SlideDeck class.</p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n</code></pre> <p>In the constructor, you can define some values that will later be used as defaults for each slide; however, each slide can override these values individually. For example, you can define a default size for slides (if not specified, 1024x968 is used):</p> <pre><code>deck = SlideDeck(width=1920, height=1080)\n</code></pre> <p>Note on resolution</p> <p>Since the main output format is PDF, which is a vector format, the resolution does not define the \"quality\" of the output, but mostly just the size ratio.</p>"},{"location":"guide/basics/#creating-a-new-slide","title":"Creating a new slide","text":"<p>You can create new slides in two ways, either using the <code>new_slide</code> method or using a decorator <code>slide</code>.</p> <p>The example of using <code>new_slide</code>:</p> <pre><code>slide = deck.new_slide(bg_color=\"blue\")\nslide.text(\"First slide\")  # Put a text into slide\n</code></pre> <p>The example of using decorator <code>slide</code>:</p> <pre><code>@deck.slide(bg_color=\"blue\")\ndef first_slide(slide):\n    slide.text(\"First slide\")  # Put a text into slide\n</code></pre> <p>The decorator immediately calls the wrapped function that sets the content of the slide. The main function of the decorator is to break slides into individual functions for code clarity.</p>"},{"location":"guide/steps/","title":"Steps","text":""},{"location":"guide/steps/#semaphore-example","title":"Semaphore example","text":"<pre><code>from nelsie import SlideDeck, InSteps\n\ndeck = SlideDeck()\n\n@deck.slide()\ndef semaphore(slide):\n    slide.text(\"Semaphore example\", m_bottom=40)\n\n    semaphore = slide.box(width=200, height=600, bg_color=\"gray\")\n    semaphore.box(\n        y=InSteps({1: 10, 2: 220, 3: 420}),\n        width=160,\n        height=160,\n        bg_color=InSteps({1: \"red\", 2: \"orange\", 3: \"green\"}),\n    )\n\ndeck.render(\"slides.pdf\")\n</code></pre> Prev 1/3         Next"}]}