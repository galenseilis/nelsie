{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#nelsie","title":"Nelsie","text":"<p>Nelsie allows you to create slides programmatically using Python. It is a library with a Python API and a renderer written in Rust. The output is a PDF file or a set of SVG/PNG files.</p> <p>There is no DSL or GUI; presentations created with Nelsie are fully programmed in Python. We believe that creating presentations in a programmable way makes the process of creating slides smoother and more reliable.</p> <p>Nelsie focuses on controlling what the audience sees, so you can continuously reveal fragments of the slide, or simply manage which parts are highlighted.</p>"},{"location":"#history","title":"History","text":"<p>Nelsie is a complete rewrite of the previous project Elsie. Nelsie solves the biggest problems of Elsie: Dependency on Inkscape as a rendering engine (This makes Elsie difficult to install on some systems; performance issues and problems when Inkscape changes its programming API). This is solved by a own rendering engine (based on resvg) included in the Nelsie package. Nelsie also offers many API improvements, namely the introduction of InSteps and the Flexbox layout engine.</p>"},{"location":"api/","title":"API docs","text":"<ul> <li>Generated API documentation</li> </ul>"},{"location":"examples/","title":"Examples","text":"<ul> <li>Minimal example [source code ]</li> <li>Demonstration of features [PDF, source code]</li> </ul>"},{"location":"getting_started/","title":"Getting started","text":"<ul> <li>Install Nelsie package: <pre><code>$ pip install nelsie\n</code></pre></li> <li>Create the file <code>slides.py</code> with the following content:</li> </ul> <pre><code>from nelsie import SlideDeck\n\n# Create a slide deck\ndeck = SlideDeck()\n\n# Insert a slide\n@deck.slide()\ndef hello_world(slide):\n    slide.text(\"Hello world!\")\n\n# Render into PDF\ndeck.render(\"slides.pdf\")\n</code></pre> <ul> <li>Run <code>python slides.py</code>. It creates file <code>slides.pdf</code>.</li> </ul>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#installation-via-pip-recommended","title":"Installation via <code>pip</code> (recommended)","text":"<pre><code>$ pip install nelsie\n</code></pre> <p>Nelsie supports Linux, Windows, and MacOS X on all major platforms.</p>"},{"location":"install/#installation-from-sources","title":"Installation from sources","text":"<ul> <li>Install Rust (https://rustup.rs/)</li> <li>Install Maturin (<code>pip install maturin</code>)</li> <li>Run in Nelsie source code directory:   <pre><code>$ python3 -m venv venv\n$ source venv/bin/activate\n$ maturin build --release\n</code></pre></li> </ul>"},{"location":"guide/basics/","title":"Basics","text":""},{"location":"guide/basics/#slide-deck","title":"Slide deck","text":"<p>A presentation (a set of slides) is represented in Nelsie as an instance of SlideDeck class.</p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n</code></pre> <p>In the constructor, you can define some values that will later be used as defaults for each slide; however, each slide can override these values individually. For example, you can define a default size for slides (if not specified, 1024x968 is used):</p> <pre><code>deck = SlideDeck(width=1920, height=1080)\n</code></pre> <p>Note on resolution</p> <p>Since the main output format is PDF, which is a vector format, the resolution does not define the \"quality\" of the output, but mostly just the size ratio.</p>"},{"location":"guide/basics/#creating-a-new-slide","title":"Creating a new slide","text":"<p>You can create new slides in two ways, either using the <code>new_slide</code> method or using a decorator <code>slide</code>.</p> <p>The example of using <code>new_slide</code>:</p> <pre><code>slide = deck.new_slide(bg_color=\"blue\")\nslide.text(\"First slide\")  # Put a text into slide\n</code></pre> <p>The example of using decorator <code>slide</code>:</p> <pre><code>@deck.slide(bg_color=\"blue\")\ndef first_slide(slide):\n    slide.text(\"First slide\")  # Put a text into slide\n</code></pre> <p>The decorator immediately calls the wrapped function that sets the content of the slide. The main function of the decorator is to break slides into individual functions for code clarity.</p>"},{"location":"guide/basics/#rendering-the-slide-deck","title":"Rendering the slide deck","text":"<p>Once all the slides have been created, you can render them into PDF with a <code>.render()</code> call on the slide deck.</p> <pre><code>deck.render(\"slides.pdf\")\n</code></pre> <p>You can also get SVG or PNG images from the slides, see the Output formats section for more information.</p>"},{"location":"guide/layout/","title":"Layout","text":"<p>Nelsie uses a layout system that is based on the Flexbox system and adds some extra features.</p> <p>The central element of the Nelsie layout system is the Box. Each Nelsie slide contains a layout hierarchy tree of boxes. Boxes do not directly produce visual output, but they dictate how their children are laid out on a slide.</p>"},{"location":"guide/layout/#creating-a-box","title":"Creating a box","text":"<p>A new box is created by calling the <code>.box()</code> method on an existing box or a slide. This will return a new box that will be a child of the element on which you call the box method. </p> <p>This is a s minimal example where we create a box inside a slide:</p> <pre><code>@deck.slide()\ndef first_box(slide):\n    slide.box()\n</code></pre> <p>When we render this slide, we see an empty slide because the box itself produces no visual output.</p> <p>To make them visible, in the next example we set a background color for the boxes. We also set them to a fixed size, because by default box tries to be as small as possible and a box with no content takes up zero space.</p> <p>Example where we create three boxes:</p> <pre><code>@deck.slide()\ndef three_boxes(slide):\n    slide.box(width=600, height=200, bg_color=\"red\")\n    slide.box(width=600, height=200, bg_color=\"green\")\n    slide.box(width=600, height=200, bg_color=\"blue\")\n</code></pre>"},{"location":"guide/layout/#debugging-layout","title":"Debugging layout","text":"<p>Another way how to visualize boxes is to set <code>debug_layout</code> to <code>True</code> in the slide configuration: </p> <pre><code>@deck.slide(debug_layout=True)\ndef debug_boxes(slide):\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n</code></pre> <p>For more configuration for debugging layout, see Debugging layout.</p>"},{"location":"guide/layout/#box-main-axis","title":"Box main axis","text":"<p>Boxes can have either be vertical or horizontal main axis:</p> <ul> <li> <p>Vertical boxes place its child items vertically in a column. Their main axis is vertical and their cross axis is horizontal.</p> </li> <li> <p>Horizontal boxes place its child items horizontally in a row. Their main axis is horizontal and their cross axis is vertical.</p> </li> </ul> <p>By default, box is vertical. It can be changed by setting the parameter <code>row</code>:</p> <pre><code>@deck.slide()\ndef three_boxes(slide):\n\n    my_box = slide.box(row=True)\n    my_box.box(width=200, height=200, bg_color=\"red\")\n    my_box.box(width=200, height=200, bg_color=\"green\")\n    my_box.box(width=200, height=200, bg_color=\"blue\")\n</code></pre>"},{"location":"guide/steps/","title":"Steps","text":""},{"location":"guide/steps/#semaphore-example","title":"Semaphore example","text":"<pre><code>from nelsie import SlideDeck, InSteps\n\ndeck = SlideDeck()\n\n@deck.slide()\ndef semaphore(slide):\n    slide.text(\"Semaphore example\", m_bottom=40)\n\n    semaphore = slide.box(width=200, height=600, bg_color=\"gray\")\n    semaphore.box(\n        y=InSteps({1: 10, 2: 220, 3: 420}),\n        width=160,\n        height=160,\n        bg_color=InSteps({1: \"red\", 2: \"orange\", 3: \"green\"}),\n    )\n\ndeck.render(\"slides.pdf\")\n</code></pre> Prev 1/3         Next"},{"location":"reference/debug_layout/","title":"Debugging layout","text":"<p>This page describes how you an debug a layout boxes by visualizing them.</p>"},{"location":"reference/debug_layout/#enabling-debug_layout-for-whole-slide","title":"Enabling <code>debug_layout</code> for whole slide","text":"<p>To visualize layout boxes you can set <code>debug_layout</code> to <code>True</code> in the slide configuration: </p> <pre><code>@deck.slide(debug_layout=True)\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n</code></pre> <p>If the default color for displaying debug frames of boxes conflicts with the colors of your slide's content or background, you can define your own color for drawing.</p> <pre><code>@deck.slide(debug_layout=\"green\")\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n</code></pre>"},{"location":"reference/debug_layout/#enabling-debug_layout-for-a-box","title":"Enabling <code>debug_layout</code> for a box","text":"<p>You can also change the color only for a specific box by setting the <code>debug_layout</code> parameter of the box. You can also disable the highlighting of a specific box frame by setting <code>debug_layout</code> to <code>False</code>.</p> <pre><code>@deck.slide(debug_layout=True)\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n\n    # Set green frame for this box\n    slide.box(width=600, height=200, debug_layout=\"green\")\n\n    # Disable layout debugging for this box\n    slide.box(width=600, height=200, debug_layout=False)\n</code></pre> <p>Or you can just enable the debug frames only for a specific box:</p> <pre><code>@deck.slide()\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n\n     # Show the debug frame for this box\n    slide.box(width=600, height=200, debug_layout=\"green\")\n\n    slide.box(width=600, height=200)\n</code></pre>"},{"location":"reference/debug_layout/#box-naming","title":"Box naming","text":"<p>You can name a box by setting the <code>name</code> parameter. The name has no effect on a layout, but it is displayed when debug frames are enabled. It may help you to find the box when there are too many boxes.</p> <p>Note: The slide previews in the documentation are too small to see the name. If you render the example in PDF, you will see it.</p> <pre><code>@deck.slide(debug_layout=True)\ndef box_with_names(slide):\n    slide.box(width=600, height=200, name=\"&gt;&gt;&gt; My-box &lt;&lt;&lt;\")\n</code></pre>"},{"location":"reference/output/","title":"Output formats","text":"<p>This section shows you how to get slides in PDF, SVG or PNG and how to render slides into files or how to get them as Python objects.</p>"},{"location":"reference/output/#rendering-into-pdf","title":"Rendering into PDF","text":"<p>By default, the <code>.render()</code> method on a slide deck takes a filename and creates a PDF file. </p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n\n# Add slides here\n\ndeck.render(\"slides.pdf\")\n</code></pre>"},{"location":"reference/output/#rendering-into-svg-or-png","title":"Rendering into SVG or PNG","text":"<p>By setting the second parameter to \"svg\" or \"png\", you can change the output format to SVG or PNG.</p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n\n# Add slides here\n\ndeck.render(\"output/path1\", \"svg\") # Render slides to SVG \n\ndeck.render(\"output/path2\", \"png\") # Render slides to PNG\n</code></pre> <p>Unlike PDF, the first parameter is not a path to a file, but to a directory where  Nelsie creates SVG (or PNG) images, one image per slide page.  Nelsie will create the target directory if it does not exist. Images are named in the format \"X-Y.svg\" (or \"X-Y.png\"), where X is the slide index and Y is a step. </p>"},{"location":"reference/output/#in-memory-rendering","title":"In-memory rendering","text":"<p>If the first parameter of the <code>.render()</code> method is <code>None</code> then Nelsie does not create files but returns the images as Python objects. It returns a list of triplets (<code>slide_id</code>, <code>step</code>, <code>data</code>) where <code>data</code> are <code>bytes</code> instance with the image.</p> <pre><code>pages = deck.render(None, \"png\") \n\nprint(pages)  # Print returned triplets with pages\n</code></pre>"}]}