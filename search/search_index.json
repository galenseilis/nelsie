{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#nelsie","title":"Nelsie","text":"<p>Nelsie allows you to create slides programmatically using Python. It is a library with a Python API and a renderer written in Rust. The output is a PDF file or a set of SVG/PNG files.</p> <p>There is no DSL or GUI; presentations created with Nelsie are fully programmed in Python. We believe that creating presentations in a programmable way makes the process of creating slides smoother and more reliable.</p> <p>Nelsie focuses on controlling what the audience sees, so you can continuously reveal fragments of the slide, or simply manage which parts are highlighted.</p>"},{"location":"#history","title":"History","text":"<p>Nelsie is a complete rewrite of the previous project Elsie. Nelsie solves the biggest problems of Elsie: Dependency on Inkscape as a rendering engine (This makes Elsie difficult to install on some systems; performance issues and problems when Inkscape changes its programming API). This is solved by a own rendering engine (based on resvg) included in the Nelsie package. Nelsie also offers many API improvements, namely the introduction of InSteps and the Flexbox layout engine.</p>"},{"location":"api/","title":"API docs","text":"<ul> <li>Generated API documentation</li> </ul>"},{"location":"examples/","title":"Examples","text":"<ul> <li>Minimal example [source code ]</li> <li>Demonstration of features [PDF, source code]</li> </ul>"},{"location":"getting_started/","title":"Getting started","text":"<ul> <li> <p>Install Nelsie package:     <pre><code>$ pip install nelsie\n</code></pre></p> </li> <li> <p>Create the file <code>slides.py</code> with the following content:</p> <pre><code>from nelsie import SlideDeck\n\n# Create a slide deck\ndeck = SlideDeck()\n\n# Insert a slide\n@deck.slide()\ndef hello_world(slide):\n    slide.text(\"Hello world!\")\n\n# Render into PDF\ndeck.render(\"slides.pdf\")\n</code></pre> </li> <li> <p>Run <code>python slides.py</code>. It creates file <code>slides.pdf</code>.</p> </li> </ul>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#installation-via-pip-recommended","title":"Installation via <code>pip</code> (recommended)","text":"<pre><code>$ pip install nelsie\n</code></pre> <p>Nelsie supports Linux, Windows, and MacOS X on all major platforms.</p>"},{"location":"install/#installation-from-sources","title":"Installation from sources","text":"<ul> <li>Install Rust (https://rustup.rs/)</li> <li>Install Maturin (<code>pip install maturin</code>)</li> <li>Run in Nelsie source code directory:   <pre><code>$ python3 -m venv venv\n$ source venv/bin/activate\n$ maturin build --release\n</code></pre></li> </ul>"},{"location":"guide/basics/","title":"Basics","text":""},{"location":"guide/basics/#slide-deck","title":"Slide deck","text":"<p>A presentation (a set of slides) is represented in Nelsie as an instance of SlideDeck class.</p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n</code></pre> <p>In the constructor, you can define some values that will later be used as defaults for each slide; however, each slide can override these values individually. For example, you can define a default size for slides (if not specified, 1024x968 is used):</p> <pre><code>deck = SlideDeck(width=1920, height=1080)\n</code></pre> <p>Note on resolution</p> <p>Since the main output format is PDF, which is a vector format, the resolution does not define the \"quality\" of the output, but mostly just the size ratio.</p>"},{"location":"guide/basics/#creating-a-new-slide","title":"Creating a new slide","text":"<p>You can create new slides in two ways, either using the <code>new_slide</code> method or using a decorator <code>slide</code>.</p> <p>The example of using <code>new_slide</code>:</p> <pre><code>slide = deck.new_slide(bg_color=\"blue\")\nslide.text(\"First slide\")  # Put a text into slide\n</code></pre> <p>The example of using decorator <code>slide</code>:</p> <pre><code>@deck.slide(bg_color=\"blue\")\ndef first_slide(slide):\n    slide.text(\"First slide\")  # Put a text into slide\n</code></pre> <p>The decorator immediately calls the wrapped function that sets the content of the slide. The main function of the decorator is to break slides into individual functions for code clarity.</p>"},{"location":"guide/basics/#rendering-the-slide-deck","title":"Rendering the slide deck","text":"<p>Once all the slides have been created, you can render them into PDF with a <code>.render()</code> call on the slide deck.</p> <pre><code>deck.render(\"slides.pdf\")\n</code></pre> <p>You can also get SVG or PNG images from the slides, see the Output formats section for more information.</p>"},{"location":"guide/layout/","title":"Layout","text":"<p>Nelsie uses a layout system that is based on the Flexbox system and adds some extra features.</p> <p>The central element of the Nelsie layout system is the Box. A box is a rectangular area on a slide that has a position and size. A box can contain other boxes or content (a text or an image). Each Nelsie slide contains a hierarchical tree of boxes. Boxes usually do not produce visual output directly, but they dictate how their children are arranged on a slide.</p>"},{"location":"guide/layout/#creating-a-box","title":"Creating a box","text":"<p>A new box is created by calling the <code>.box()</code> method on an existing box or a slide. This will return a new box that will be a child of the element on which you call the box method.</p> <p>This is a s minimal example where we create a box inside a slide:</p> <pre><code>@deck.slide()\ndef first_box(slide):\n    slide.box()\n</code></pre> <p>When we render this slide, we see an empty slide because the box itself produces no visual output.</p> <p>To make them visible, in the next example we set a background color for the boxes. We also set them to a fixed size, because by default box tries to be as small as possible and a box with no content takes up zero space.</p> <p>Example where we create three boxes:</p> <pre><code>@deck.slide()\ndef three_boxes(slide):\n    slide.box(width=600, height=200, bg_color=\"red\")\n    slide.box(width=600, height=200, bg_color=\"green\")\n    slide.box(width=600, height=200, bg_color=\"blue\")\n</code></pre> <p>The full reference on <code>.box()</code> parameters is in the section Box</p>"},{"location":"guide/layout/#debugging-layout","title":"Debugging layout","text":"<p>Another way how to visualize boxes is to set <code>debug_layout</code> to <code>True</code> in the slide configuration: </p> <pre><code>@deck.slide(debug_layout=True)\ndef debug_boxes(slide):\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n</code></pre> <p>For more configuration for debugging layout, see Debugging layout.</p>"},{"location":"guide/layout/#box-main-axis","title":"Box main axis","text":"<p>Boxes can have either be vertical or horizontal main axis:</p> <ul> <li> <p>Vertical boxes place its child items vertically in a column. Their main axis is vertical and their cross axis is horizontal.</p> </li> <li> <p>Horizontal boxes place its child items horizontally in a row. Their main axis is horizontal and their cross axis is vertical.</p> </li> </ul> <p>By default, box is vertical. It can be changed by setting the parameter <code>row</code>:</p> <pre><code>@deck.slide()\ndef three_boxes(slide):\n\n    my_box = slide.box(row=True)\n    my_box.box(width=200, height=200, bg_color=\"red\")\n    my_box.box(width=200, height=200, bg_color=\"green\")\n    my_box.box(width=200, height=200, bg_color=\"blue\")\n</code></pre> <p>A box in a box</p> <p>Box can contain other boxes. A box within the box can be created by calling the <code>.box()</code> method on the parent box. In this example, the slide's root box contains <code>my_box</code> and <code>my_box</code> contains three other boxes.</p>"},{"location":"guide/layout/#box-size","title":"Box size","text":"<p>Each box has a width and a height. By default, the box tries to take up as little space as possible. It will wraps its content tightly. If there is no content, the box has zero size. This behaviour can be configured by setting the <code>width</code>, <code>height</code>, <code>flex-grow</code> and <code>flex-shrink</code> parameters.</p>"},{"location":"guide/layout/#width-and-height","title":"Width and Height","text":"<p>Weight/height parameters:</p> <ul> <li><code>None</code> - (default) Automatic size. Minimum size around the content if <code>flex-grow</code> / <code>flex-shrink</code> is not set.</li> <li><code>int</code> or <code>float</code> or <code>str</code> containing digits -- A fixed size given in pixels (example values: <code>20.5</code>, or <code>\"1.5\"</code>)</li> <li><code>str</code> in format <code>\"XX%\"</code> where <code>XX</code> is an integer -- A relative size to the parent box, in percent (example: <code>\"50%\"</code>)</li> <li><code>LayoutExpr</code> - A fixed size defined by a layout expression.</li> </ul>"},{"location":"guide/layout/#flex-grow","title":"Flex grow","text":"<p>The <code>flex_grow</code> parameter takes a <code>float</code> value. The default is <code>0</code>. This attribute specifies how much of the remaining space of its parent box should be allocated to this box. </p> <p>The remaining space is the size of the box minus the size of all its children. If multiple sibling boxes have positive `flex_grow' values, it is distributed according to the ratio defined by their values.</p> <p>This property is equivalent to the CSS property `flex-grow'.</p> <pre><code>@deck.slide()\ndef flex_grow_demo(slide):\n    slide.box(width=200, height=100, bg_color=\"red\")\n    slide.box(width=200, flex_grow=1, bg_color=\"green\")\n    slide.box(width=200, height=200, bg_color=\"blue\")\n</code></pre>"},{"location":"guide/layout/#padding-margin","title":"Padding &amp; Margin","text":"<p>Padding (inner space) and margin (outer space) can be set via <code>p_left</code>, <code>p_right</code>, <code>p_top</code>, and <code>p_bottom</code> for setting padding and <code>m_left</code>, <code>m_right</code>, <code>m_top</code>, and <code>m_bottom</code> for setting a margin. </p> <pre><code>@deck.slide()\ndef flex_grow_demo(slide):\n    my_box = slide.box(p_top=100, p_left=50, bg_color=\"red\")\n    my_box.box(width=200, height=200, bg_color=\"green\")\n</code></pre> <p>There are also the following parameters for setting more padding/margin parameters at once:</p> <ul> <li><code>p_x</code> that sets <code>p_left</code> and <code>p_right</code></li> <li><code>p_y</code> that sets <code>p_top</code> and <code>p_bottom</code></li> <li><code>m_x</code> that sets <code>m_left</code> and <code>m_right</code></li> <li><code>m_y</code> that sets <code>m_top</code> and <code>m_bottom</code></li> </ul>"},{"location":"guide/layout/#araning-box-children","title":"Araning box children","text":"<p>Nelsie provides a flexbox layout system. See Flexbox froggy for a nice tutorial.</p> <p>Nelsie supports from flexbox: <code>justify_content</code>, <code>align_items</code>, <code>align_self</code>, <code>align_items</code>, <code>align_self</code>, <code>justify_self</code>, <code>align_content</code>, <code>justify_content</code> and <code>gap</code>.</p> <p>The default configuration is <code>\"center\"</code> for configurations <code>justify_content</code> and <code>align_items</code>, i.e. items are put in the center on both axes.</p>"},{"location":"guide/layout/#example-for-justify_content","title":"Example for <code>justify_content</code>","text":"<pre><code>@deck.slide()\ndef justify_content_start(slide):\n    b = slide.box(height=\"100%\", justify_content=\"start\")\n    b.box(width=200, height=150, bg_color=\"red\")\n    b.box(width=200, height=150, bg_color=\"green\")\n    b.box(width=200, height=150, bg_color=\"blue\")\n\n\n@deck.slide()\ndef justify_content_end(slide):\n    b = slide.box(height=\"100%\", justify_content=\"end\")\n    b.box(width=200, height=150, bg_color=\"red\")\n    b.box(width=200, height=150, bg_color=\"green\")\n    b.box(width=200, height=150, bg_color=\"blue\")\n\n\n@deck.slide()\ndef justify_content_end(slide):\n    b = slide.box(height=\"100%\", justify_content=\"space-evenly\")\n    b.box(width=200, height=150, bg_color=\"red\")\n    b.box(width=200, height=150, bg_color=\"green\")\n    b.box(width=200, height=150, bg_color=\"blue\")\n</code></pre> Prev 1/3         Next"},{"location":"guide/layout/#fixed-positioning-of-a-box","title":"Fixed positioning of a box","text":"<p>You can set parameters <code>x</code> and <code>y</code> to set a fix position of the box independantly on the layout engine.</p> <ul> <li><code>None</code> - (default) Coordianes are set by the layout engine.</li> <li><code>int</code> or <code>float</code> or <code>str</code> containing digits -- A fixed position given relative to the parent box in pixels (example values: <code>20.5</code>, or <code>\"1.5\"</code>)</li> <li><code>str</code> in format <code>\"XX%\"</code> where <code>XX</code> is an integer -- A fixed position relative to the parent box, in percent (example value: <code>\"50%\"</code> means that <code>x</code> (resp. <code>y</code>) is set to the 50% of width (resp. height) of the parent box)</li> <li><code>LayoutExpr</code> - A fixed position defined by a layout expression. </li> </ul>"},{"location":"guide/layout/#layout-expressions","title":"Layout expressions","text":"<p>Sometimes we need a position relative to a box that is not the direct parent.  For this reason, there are \"layout expressions\" that serve as placeholders for the that can be used even if the layout is not yet finished. Layout expressions for boxes can be created by calling <code>.x()</code>, <code>.y()</code>, <code>.width()</code>, <code>.height()</code> on a box.</p> <p>Example:</p> <pre><code>@deck.slide()\ndef layout_expression_demo(slide):\n    box1 = slide.box(width=300, height=100, bg_color=\"red\")\n    box2 = slide.box(width=150, height=200, bg_color=\"green\")\n\n    # Create a new box relative to the box1 x-position and box2 y-position\n    slide.box(x=box1.x(), y=box2.y(), width=50, height=50, bg_color=\"blue\")\n</code></pre> <p>When the layout is created, you cannot get the value of expression as the whole layout is not constructed yet; however you can make a simple mathematical operations on expressions. Nelsie remebers them and applies them when the final value is computed.</p> <pre><code>@deck.slide()\ndef layout_expression_demo(slide):\n    box1 = slide.box(width=300, height=100, bg_color=\"red\")\n    box2 = slide.box(width=150, height=200, bg_color=\"green\")\n\n    # Create a new box relative to the box1 x-position - 50 and box2 y-position + 100\n    slide.box(x=box1.x() - 75, y=box2.y() + 100,\n              width=50, height=50, bg_color=\"blue\")\n</code></pre> <p>All of these methods take an optional <code>float' parameter, which sets the position or size with respect to the fraction of the box size in the given dimension, e.g.</code>.x(0.5)<code>means the center of the box on the</code>X` axis. More precisely, it is defined as follows:</p> <ul> <li><code>.x(v)</code> = <code>.x()</code> + v * <code>.width()</code></li> <li><code>.y(v)</code> = <code>.y()</code> + v * <code>.width()</code></li> <li><code>.width(v)</code> = v * <code>.width()</code></li> <li><code>.width(v)</code> = h * <code>.width()</code></li> </ul> <p>Example:</p> <pre><code>@deck.slide()\ndef layout_expression_demo(slide):\n    box1 = slide.box(width=300, height=400, bg_color=\"red\")\n\n    slide.box(x=box1.x(0.5), y=box1.y(0.25), \n              width=box1.width(0.5), height=box1.height(0.5),\n              bg_color=\"green\")\n</code></pre> <p>There are more layout expressions then position and size of a box, see XXXX.</p>"},{"location":"guide/layout/#method-overlay","title":"Method <code>.overlay()</code>","text":"<p>There is a <code>.overlay()</code> method that is a shortcut for <code>.box(x=0, y=0, width=\"100%\", height=\"100%\")</code>; it creates a box that spans over the whole parent box.</p>"},{"location":"guide/steps/","title":"Steps","text":""},{"location":"guide/steps/#semaphore-example","title":"Semaphore example","text":"<pre><code>from nelsie import SlideDeck, InSteps\n\ndeck = SlideDeck()\n\n@deck.slide()\ndef semaphore(slide):\n    slide.text(\"Semaphore example\", m_bottom=40)\n\n    semaphore = slide.box(width=200, height=600, bg_color=\"gray\")\n    semaphore.box(\n        y=InSteps({1: 10, 2: 220, 3: 420}),\n        width=160,\n        height=160,\n        bg_color=InSteps({1: \"red\", 2: \"orange\", 3: \"green\"}),\n    )\n\ndeck.render(\"slides.pdf\")\n</code></pre> Prev 1/3         Next"},{"location":"guide/text/","title":"Text","text":"<p>This section is about drawing text on slides.</p> <p>Text is drawn on a box (or slide) by calling the <code>.text()</code> method. It creates a new box containing a text.</p> <pre><code>@deck.slide()\ndef text_demo(slide):\n    slide.text(\"Hello world!\")\n</code></pre> <p>Note for Elsie users</p> <p>Calling <code>.text()</code> creates a new box; this is a different behavior than in Elsie, where calling <code>.text()</code> does not create a new box, which very often leads to code like <code>.box().text()</code> to create a wrapping box. This is not necessary in Nelsie.</p>"},{"location":"guide/text/#text-styles","title":"Text styles","text":""},{"location":"guide/text/#named-styles","title":"Named styles","text":""},{"location":"guide/text/#inline-styles","title":"Inline styles","text":""},{"location":"guide/text/#_1","title":"Text","text":""},{"location":"reference/box/","title":"Box","text":"<p>Box is a basic layout in Nelsie. It represents a rectangular area on the slide.</p> <p>A new box is created by calling the <code>.box()</code> method on an existing box or a slide. This will return a new box that will be a child of the element on which you call the box method. </p>"},{"location":"reference/box/#parameters-of-box","title":"Parameters of <code>.box()</code>","text":""},{"location":"reference/box/#step-related-parameters","title":"Step-related parameters","text":"<ul> <li><code>show</code> - Defines the steps in which the box (its contents and children) is displayed. It only affects the drawing itself. The layout is always calculated, i.e. the space is reserved for the box, even in the steps where it is not painted.     Takes the following types:<ul> <li><code>bool</code> - the box is shown (<code>True</code>) or hidden (<code>False</code>) in all steps.</li> <li><code>int</code> - the box is shown only in the given step</li> <li><code>str</code> - a string may have the following format:<ul> <li><code>\"&lt;number&gt;\"</code> - the box is shown only in the given step</li> <li><code>\"&lt;number&gt;+\"</code> - the box is shown in the given step and all following steps</li> <li><code>\"&lt;number&gt;-&lt;number&gt;\"</code> - the box is shown in the steps in the given range.</li> <li>Comma separated list of the expression above. Then the box is shown in the union of steps defined by expressions. Example: <code>\"1, 5, 20-30, 35+\"</code>.</li> </ul> </li> </ul> </li> <li><code>active</code> - Takes the same parameters as <code>show</code> but in steps when the box is not active, it is also removed from the layout, i.e. no space is reserved for the box.</li> <li><code>replace_steps</code> - Takes <code>None</code> or a dictionary that maps </li> </ul>"},{"location":"reference/box/#ordering-parameters","title":"Ordering parameters","text":"<ul> <li><code>z_level</code> - Integer value used in paint ordering. Higher number is drown later. If not set, value is inherited from the parent box. Default value of the slide root's box is <code>0</code>.</li> </ul>"},{"location":"reference/box/#background-parameters","title":"Background parameters","text":"<ul> <li><code>bg_color</code>- Sets a background color of the box. If <code>None</code>, no background is drawn. Default: <code>None</code>.</li> <li><code>border_radius</code> - A radius of the box's rounded corner. If <code>0</code> then no border is not rounded. Default: <code>0</code>.</li> </ul>"},{"location":"reference/box/#layout-parameters","title":"Layout parameters","text":"<ul> <li><code>x</code> -- X position of the box</li> <li><code>y</code> -- Y position of the box</li> <li> <p><code>width</code> -- Width of the box</p> <ul> <li><code>None</code> - (default) Automatic size. Minimum size around the content if <code>flex-grow</code> / <code>flex-shrink</code> is not set.</li> <li><code>int</code> or <code>float</code> or <code>str</code> containing digits -- A fixed size given in pixels (example: <code>20.5</code>, or <code>\"1.5\"</code>)</li> <li><code>str</code> in format <code>\"XX%\"</code> where <code>XX</code> is an integer -- A relative size to the parent box, in percent (example: <code>\"50%\"</code>)</li> <li><code>LayoutExpr</code> -- A fixed size defined by a layout expression.</li> </ul> </li> <li> <p><code>height</code> - Height of the box</p> <ul> <li>The paramter takes the same values as <code>width</code>.</li> </ul> </li> <li> <p><code>row</code> - If <code>True</code> then the box arranges its children horizontally; otherwise vertically. Default: <code>False</code></p> </li> <li><code>reverse</code> - If <code>True</code> then child boxes are ordered in the reverse order; i.e. in bottom-up (or right-left if <code>row</code> is <code>True</code>) Default: <code>False</code>. </li> <li><code>flex_wrap</code> - </li> <li> <p><code>flex_grow</code> - The <code>flex_grow</code> parameter takes a <code>float</code> value. The default is <code>0</code>. This attribute specifies how much of the remaining space of its parent box should be allocated to this box. </p> <p>The remaining space is the size of the box minus the size of all its children. If multiple sibling boxes have positive `flex_grow' values, it is distributed according to the ratio defined by their values.</p> <p>This property is equivalent to the CSS property <code>flex-grow'. *</code>flex_shrink<code>-  *</code>align_items<code>- *</code>align_self<code>-  *</code>justify_self<code>-  *</code>align_content<code>- *</code>justify_content<code>-  *</code>gap` - </p> </li> </ul>"},{"location":"reference/box/#padding-parameters","title":"Padding parameters","text":"<ul> <li><code>p_left</code> - Left padding</li> <li><code>p_right</code> - Right padding</li> <li><code>p_top</code> - Top padding</li> <li><code>p_bottom</code> - Bottom padding</li> <li><code>p_x</code> - Shortcut for setting <code>p_left</code> and <code>p_right</code> to the same value</li> <li><code>p_y</code> - Shortcut for setting <code>p_top</code> and <code>p_bottom</code> to the same value</li> </ul>"},{"location":"reference/box/#margin-parameters","title":"Margin parameters","text":"<ul> <li><code>m_left</code> - Left margin</li> <li><code>m_right</code> - Right margin</li> <li><code>m_top</code> - Top margin</li> <li><code>m_bottom</code> - Bottom margin</li> <li><code>m_x</code> - Shortcut for setting <code>m_left</code> and <code>m_right</code> to the same value</li> <li><code>m_y</code> - Shortcut for setting <code>m_top</code> and <code>m_bottom</code> to the same value</li> </ul>"},{"location":"reference/box/#debugging-parameters","title":"Debugging parameters","text":"<ul> <li><code>name</code> - The name of the slide. It is displayed when the layout debugging view is enabled.</li> <li><code>debug_layout</code> - Enables/disables the layout debugging view for the box. If <code>True</code> then the view will be enabled with the   view will be enabled with the default colour for this box. If <code>str</code> is given then the view is enabled and the string is interpreted as the colour of the debugging view (e.g. <code>debug_view=\"green\"</code>). If <code>False</code> then the debugging view is disabled for this box, even if the whole slide has the debugging view enabled.</li> </ul>"},{"location":"reference/debug_layout/","title":"Debugging layout","text":"<p>This page describes how you an debug a layout boxes by visualizing them.</p>"},{"location":"reference/debug_layout/#enabling-debug_layout-for-whole-slide","title":"Enabling <code>debug_layout</code> for whole slide","text":"<p>To visualize layout boxes you can set <code>debug_layout</code> to <code>True</code> in the slide configuration: </p> <pre><code>@deck.slide(debug_layout=True)\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n</code></pre> <p>If the default color for displaying debug frames of boxes conflicts with the colors of your slide's content or background, you can define your own color for drawing.</p> <pre><code>@deck.slide(debug_layout=\"green\")\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n    slide.box(width=600, height=200)\n</code></pre>"},{"location":"reference/debug_layout/#enabling-debug_layout-for-a-box","title":"Enabling <code>debug_layout</code> for a box","text":"<p>You can also change the color only for a specific box by setting the <code>debug_layout</code> parameter of the box. You can also disable the highlighting of a specific box frame by setting <code>debug_layout</code> to <code>False</code>.</p> <pre><code>@deck.slide(debug_layout=True)\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n\n    # Set green frame for this box\n    slide.box(width=600, height=200, debug_layout=\"green\")\n\n    # Disable layout debugging for this box\n    slide.box(width=600, height=200, debug_layout=False)\n</code></pre> <p>Or you can just enable the debug frames only for a specific box:</p> <pre><code>@deck.slide()\ndef example_slide(slide):\n    slide.box(width=600, height=200)\n\n     # Show the debug frame for this box\n    slide.box(width=600, height=200, debug_layout=\"green\")\n\n    slide.box(width=600, height=200)\n</code></pre>"},{"location":"reference/debug_layout/#box-naming","title":"Box naming","text":"<p>You can name a box by setting the <code>name</code> parameter. The name has no effect on a layout, but it is displayed when debug frames are enabled. It may help you to find the box when there are too many boxes.</p> <p>Note: The slide previews in the documentation are too small to see the name. If you render the example in PDF, you will see it.</p> <pre><code>@deck.slide(debug_layout=True)\ndef box_with_names(slide):\n    slide.box(width=600, height=200, name=\"&gt;&gt;&gt; My-box &lt;&lt;&lt;\")\n</code></pre>"},{"location":"reference/layoutexpr/","title":"Layout expressions","text":"<p>TODO</p>"},{"location":"reference/output/","title":"Output formats","text":"<p>This section shows you how to get slides in PDF, SVG or PNG and how to render slides into files or how to get them as Python objects.</p>"},{"location":"reference/output/#rendering-into-pdf","title":"Rendering into PDF","text":"<p>By default, the <code>.render()</code> method on a slide deck takes a filename and creates a PDF file. </p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n\n# Add slides here\n\ndeck.render(\"slides.pdf\")\n</code></pre>"},{"location":"reference/output/#rendering-into-svg-or-png","title":"Rendering into SVG or PNG","text":"<p>By setting the second parameter to \"svg\" or \"png\", you can change the output format to SVG or PNG.</p> <pre><code>from nelsie import SlideDeck\n\ndeck = SlideDeck()\n\n# Add slides here\n\ndeck.render(\"output/path1\", \"svg\") # Render slides to SVG \n\ndeck.render(\"output/path2\", \"png\") # Render slides to PNG\n</code></pre> <p>Unlike PDF, the first parameter is not a path to a file, but to a directory where  Nelsie creates SVG (or PNG) images, one image per slide page.  Nelsie will create the target directory if it does not exist. Images are named in the format \"X-Y.svg\" (or \"X-Y.png\"), where X is the slide index and Y is a step. </p>"},{"location":"reference/output/#in-memory-rendering","title":"In-memory rendering","text":"<p>If the first parameter of the <code>.render()</code> method is <code>None</code> then Nelsie does not create files but returns the images as Python objects. It returns a list of triplets (<code>slide_id</code>, <code>step</code>, <code>data</code>) where <code>data</code> are <code>bytes</code> instance with the image.</p> <pre><code>pages = deck.render(None, \"png\") \n\nprint(pages)  # Print returned triplets with pages\n</code></pre>"},{"location":"reference/resources/","title":"Resources","text":"<p>An instance of the Resources class holds information about fonts and loaded images. By default, an instance of SlideDeck creates its own instance of Resources, but you can create your own instance and pass it to the SlideDeck constructor.</p> <p>There are two scenarios where it is useful to create your own instance of `Resources'.</p> <ul> <li>You want to register your own fonts</li> <li>You create more instances of <code>SlideDeck</code> and you want to skip some initialization related to font detection or to skip loading the same images repeatedly.</li> </ul>"},{"location":"reference/resources/#example-registering-own-fonts","title":"Example: Registering own fonts","text":"<pre><code>from nelsie import Resources, SlideDeck\n\nresources = Resources()\nresources.load_fonts_dir(\"path/to/fonts\")\n\ndeck = SlideDeck(resources=resources)\n</code></pre>"},{"location":"reference/resources/#example-reusing-resources-in-more-slide-decks","title":"Example: Reusing resources in more slide decks","text":"<pre><code>from nelsie import Resources, SlideDeck\n\nresources = Resources()\n\ndeck1 = SlideDeck(resources=resources)\ndeck2 = SlideDeck(resources=resources)\n</code></pre>"}]}